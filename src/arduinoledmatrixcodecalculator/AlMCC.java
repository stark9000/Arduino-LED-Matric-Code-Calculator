/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arduinoledmatrixcodecalculator;

/**
 *
 * @author saliya
 */
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class AlMCC extends javax.swing.JFrame implements WindowListener {

    private static final int ICON_WIDTH = 20;
    private Token[][] DOTS;
    private JLabel[][] GRID;
    private final Map<Token, Icon> ICONMAP = new EnumMap<>(Token.class);
    private Dimension DIMENSION;
    private JLabel SELECTION;
    private List<JLabel> PATH;
    private JLabel JLT;
    private int DATA[][] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},};
    int MATRIX_LENGTH = 0;
    private String ROW_1 = "";
    private String ROW_2 = "";
    private String ROW_3 = "";
    private String ROW_4 = "";
    private String ROW_5 = "";
    private String ROW_6 = "";
    private String ROW_7 = "";
    private String ROW_8 = "";
    private String HEX_ADDRESS = "";
    private int STRING_TO_INT;

    String TXT_TO_STRING = "";
    String PANE_TO_STRING = "";
    StringSelection SELECTION_FOR_CLIPBOARD = null;
    Clipboard CLIPBOARD = null;

    private StringBuilder MATRIX_BIN;
    private StringBuilder SKETCH;

    private Date DATE_STAMP;
    private String DATE_STAMP_FORMATED;

    /**
     * Creates new form AlMCC
     */
    public AlMCC() {
        initComponents();
        initx();
    }

    private void initx() {
        addWindowListener(this);
        ICONMAP.put(Token.VIDE, createIcon(new Color(0, 0, 0, 0)));
        ICONMAP.put(Token.CERCLE_RED, createIcon(Color.RED));
        ICONMAP.put(Token.CERCLE_CLEAN, createIcon(Color.BLACK));
        createMatrix();
        allOFF();
    }

    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosing(WindowEvent e) {
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to quit now ?", "Quit", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    @Override
    public void windowClosed(WindowEvent e) {

    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {

    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

    }

    enum Token {
        VIDE, CERCLE_RED, CERCLE_CLEAN
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Arduino 8x8 LED Matrix Code Calculator v1.0");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(230, 230));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 206, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 206, Short.MAX_VALUE)
        );

        jButton1.setText("All On");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("All Off");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jEditorPane1);

        jButton3.setText("copy");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("copy");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("copy Arduino Sketch");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5))
                    .addComponent(jTextField1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        SKETCH = new StringBuilder();
        DATE_STAMP = new Date();
        DATE_STAMP_FORMATED = new SimpleDateFormat("yyyy-MM-dd:HH-mm-ss").format(DATE_STAMP);
        SKETCH.append("/*");
        SKETCH.append("\n");
        SKETCH.append("-------------------------------------------------------- ");
        SKETCH.append("\n");
        SKETCH.append("  8x8 Matrix Test Sketch.");
        SKETCH.append("\n");
        SKETCH.append("-------------------------------------------------------- ");
        SKETCH.append("\n");
        SKETCH.append(" Connect MAX7219  DIN PIN to Arduino digital PIN 2(D2). ");
        SKETCH.append("\n");
        SKETCH.append(" Connect MAX7219  CS   PIN to Arduino digital PIN 3(D3). ");
        SKETCH.append("\n");
        SKETCH.append(" Connect MAX7219  CLK  PIN to Arduino digital PIN 4(D4). ");
        SKETCH.append("\n");
        SKETCH.append("-------------------------------------------------------- ");
        SKETCH.append("\n");
        SKETCH.append(DATE_STAMP_FORMATED).append(" : generated with ").append(this.getTitle());
        SKETCH.append("\n");
        SKETCH.append("*/ ");
        SKETCH.append("\n");
        SKETCH.append("\n");

        SKETCH.append("#include <LedControl.h>");
        SKETCH.append("\n");
        SKETCH.append("int DIN = 2;");
        SKETCH.append("\n");
        SKETCH.append("int CLK = 4;");
        SKETCH.append("\n");
        SKETCH.append("int CS = 3;");
        SKETCH.append("\n");
        SKETCH.append("\n");
        SKETCH.append("LedControl lc = LedControl(DIN, CLK, CS, 1);");
        SKETCH.append("\n");
        SKETCH.append("byte TEST[8] = ").append(jTextField1.getText()).append("");
        SKETCH.append("\n");
        SKETCH.append("\n");
        SKETCH.append("void setup() {");
        SKETCH.append("\n");
        SKETCH.append("lc.shutdown(0, false);");
        SKETCH.append("\n");
        SKETCH.append("lc.setIntensity(0, 10);");
        SKETCH.append("\n");
        SKETCH.append("lc.clearDisplay(0);");
        SKETCH.append("\n");
        SKETCH.append("}");
        SKETCH.append("\n");
        SKETCH.append("\n");
        SKETCH.append("void loop() {");
        SKETCH.append("\n");
        SKETCH.append(" printByte(TEST);");
        SKETCH.append("\n");
        SKETCH.append("}");
        SKETCH.append("\n");

        SKETCH.append("void printByte(byte character [])");
        SKETCH.append("\n");
        SKETCH.append("{");
        SKETCH.append("\n");
        SKETCH.append("int i = 0;");
        SKETCH.append("\n");
        SKETCH.append("for (i = 0; i < 8; i++)");
        SKETCH.append("\n");
        SKETCH.append(" {");
        SKETCH.append("\n");
        SKETCH.append(" lc.setColumn(0, i, character[i]);");
        SKETCH.append("\n");
        SKETCH.append("}");
        SKETCH.append("\n");
        SKETCH.append("}");
        SKETCH.append("\n");

        SELECTION_FOR_CLIPBOARD = new StringSelection(SKETCH.toString());
        CLIPBOARD = Toolkit.getDefaultToolkit().getSystemClipboard();
        CLIPBOARD.setContents(SELECTION_FOR_CLIPBOARD, null);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        TXT_TO_STRING = jTextField1.getText();
        SELECTION_FOR_CLIPBOARD = new StringSelection(TXT_TO_STRING);
        CLIPBOARD = Toolkit.getDefaultToolkit().getSystemClipboard();
        CLIPBOARD.setContents(SELECTION_FOR_CLIPBOARD, null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        PANE_TO_STRING = jEditorPane1.getText();
        SELECTION_FOR_CLIPBOARD = new StringSelection(PANE_TO_STRING);
        CLIPBOARD = Toolkit.getDefaultToolkit().getSystemClipboard();
        CLIPBOARD.setContents(SELECTION_FOR_CLIPBOARD, null);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        allOFF();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        allON();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlMCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlMCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlMCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlMCC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlMCC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
  private String toHEX(String bin) {
        STRING_TO_INT = Integer.parseInt(bin, 2);
        HEX_ADDRESS = String.format("%1$02X", STRING_TO_INT);
        HEX_ADDRESS = "0x" + HEX_ADDRESS;
        return HEX_ADDRESS;
    }

    private void arrangeAll(int ROW[][]) {
        ROW_1 = "";
        for (int i = 7; i > -1; i--) {
            ROW_1 += ROW[i][7];
        }
        ROW_2 = "";
        for (int i = 7; i > -1; i--) {
            ROW_2 += ROW[i][6];
        }
        ROW_3 = "";
        for (int i = 7; i > -1; i--) {
            ROW_3 += ROW[i][5];
        }
        ROW_4 = "";
        for (int i = 7; i > -1; i--) {
            ROW_4 += ROW[i][4];
        }
        ROW_5 = "";
        for (int i = 7; i > -1; i--) {
            ROW_5 += ROW[i][3];
        }
        ROW_6 = "";
        for (int i = 7; i > -1; i--) {
            ROW_6 += ROW[i][2];
        }
        ROW_7 = "";
        for (int i = 7; i > -1; i--) {
            ROW_7 += ROW[i][1];
        }
        ROW_8 = "";
        for (int i = 7; i > -1; i--) {
            ROW_8 += ROW[i][0];
        }

        jTextField1.setText("");
        jTextField1.setText("{" + toHEX(ROW_1) + "," + toHEX(ROW_2) + "," + toHEX(ROW_3) + "," + toHEX(ROW_4) + "," + toHEX(ROW_5) + "," + toHEX(ROW_6) + "," + toHEX(ROW_7) + "," + toHEX(ROW_8) + "};");
        printMEx(ROW);
    }

    public void printMEx(int[][] MATRIX) {
        MATRIX_BIN = new StringBuilder();
        MATRIX_LENGTH = MATRIX.length;
        for (int i = 0; i < MATRIX_LENGTH; ++i) {
            for (int j = 0; j < MATRIX_LENGTH; ++j) {
                if (j == 0) {
                    MATRIX_BIN.append("{");
                }
                MATRIX_BIN.append(MATRIX[i][j]);
                if (j != 7) {
                    MATRIX_BIN.append(",");
                }
            }
            MATRIX_BIN.append("}\n");
        }
        jEditorPane1.setText(MATRIX_BIN.toString());
    }

    private Icon createIcon(Color color) {
        BufferedImage img = new BufferedImage(ICON_WIDTH, ICON_WIDTH, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = img.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(color);
        g2.fillOval(1, 1, ICON_WIDTH - 2, ICON_WIDTH - 2);
        g2.dispose();
        return new ImageIcon(img);
    }

    void createMatrix() {
        DIMENSION = new Dimension(200, 200);
        DOTS = new Token[8][8];
        MyMouseListener listener = new MyMouseListener();
        jPanel1.setLayout(new GridLayout(8, 8, 1, 1));
        jPanel1.setPreferredSize(DIMENSION);
        jPanel1.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        jPanel1.setBackground(Color.DARK_GRAY);
        GRID = new JLabel[8][8];

        for (JLabel[] GRID1 : GRID) {
            for (int c = 0; c < GRID1.length; c++) {
                GRID1[c] = new JLabel(ICONMAP.get(Token.VIDE));
                GRID1[c].addMouseListener(listener);
                GRID1[c].setOpaque(true);
                GRID1[c].setBackground(Color.WHITE);
                GRID1[c].setPreferredSize(new Dimension(20, 20));
                jPanel1.add(GRID1[c]);
            }
        }

    }

    private class MyMouseListener extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {
            SELECTION = (JLabel) e.getSource();
            for (int r = 0; r < GRID.length; r++) {
                for (int c = 0; c < GRID[r].length; c++) {
                    if (SELECTION == GRID[r][c]) {
                        if (SELECTION.getIcon() != null) {
                            if (SELECTION.getIcon() == ICONMAP.get(Token.CERCLE_CLEAN)) {
                                SELECTION.setIcon(ICONMAP.get(Token.CERCLE_RED));
                                DATA[(r)][(c)] = 1;
                            } else if (SELECTION.getIcon() == ICONMAP.get(Token.CERCLE_RED)) {
                                SELECTION.setIcon(ICONMAP.get(Token.CERCLE_CLEAN));
                                DATA[(r)][(c)] = 0;
                            }
                        }

                    }
                }
            }
            arrangeAll(DATA);
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (PATH != null) {
            Graphics2D g2d = (Graphics2D) jPanel1.getGraphics();
            Point startPoint = null;
            for (JLabel label : PATH) {
                g2d.setColor(Color.DARK_GRAY);
                Point endPoint = label.getLocation();
                endPoint.x += (label.getWidth() / 2);
                endPoint.y += (label.getHeight() / 2);
                if (startPoint != null) {
                    g2d.draw(new Line2D.Float(startPoint, endPoint));
                }
                startPoint = endPoint;
            }
            g2d.dispose();
        }
    }

    private void allOFF() {
        Component[] components = jPanel1.getComponents();
        for (Component component : components) {
            if (component instanceof JLabel) {
                JLT = (JLabel) component;
                JLT.setIcon(ICONMAP.get(Token.CERCLE_CLEAN));
            }
        }
        for (int r = 0; r < GRID.length; r++) {
            for (int c = 0; c < GRID[r].length; c++) {
                DATA[r][c] = 0;
            }
        }
        arrangeAll(DATA);
    }

    private void allON() {
        Component[] components = jPanel1.getComponents();
        for (Component component : components) {
            if (component instanceof JLabel) {
                JLT = (JLabel) component;
                JLT.setIcon(ICONMAP.get(Token.CERCLE_RED));
            }
        }
        for (int r = 0; r < GRID.length; r++) {
            for (int c = 0; c < GRID[r].length; c++) {
                DATA[r][c] = 1;
            }
        }
        arrangeAll(DATA);
    }
}
